/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/java_library_plugin.html
 */
buildscript {

  repositories {
    mavenCentral()
  }
  
  dependencies {
  }
}

plugins {
  id "org.jetbrains.kotlin.jvm" version "1.7.0"
  id "java-library"
  id "maven-publish"
}

/* PUBLISHING */
group = 'ee.lib.kotlin'
version = "0.1.6"

sourceCompatibility = 1.8
targetCompatibility = 1.8

task sourcesJar(type: Jar) {
  from sourceSets.main.kotlin
  classifier = 'sources'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'kossh'
      from components.java
      artifact sourcesJar
      pom {
        name = "KoSSH"
        description = "An SSH library for Kotlin"
        scm {
          url = "https://bitbucket.org/applieddataconsultants/kossh"
        }
      }
    }

  }
  repositories {
    maven {
      url = 'http://archiva.adc.int/repository/internal/'
      credentials {
        username = 'gradle'
        password = 'gradle1'
      }
      allowInsecureProtocol = true
    }
  }
}

dependencies {
  implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.0'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3'
  implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.16.1'

   api 'com.github.mwiede:jsch:0.2.1'
  api 'org.bouncycastle:bcprov-jdk18on:1.71'

  implementation 'org.slf4j:slf4j-api:1.7.25'

  testImplementation 'ch.qos.logback:logback-classic:1.2.3'
  testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.0.4'
}

// In this section you declare where to find the dependencies of your project
repositories {
  // Use jcenter for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()
}

//gradle clean fatJar
task fatJar(type: Jar) {
  baseName = rootProject.name
  from {
    configurations.compile.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  with jar
}
